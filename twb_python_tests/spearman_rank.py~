#!/usr/bin/env python
# coding: utf-8

# <h1>Simple Spearman rank correlation computation</h1>

# ## load libraries

# In[2]:


import numpy as np # for math
import scipy as sc # for stats
import pandas as pd # for file I/O
import matplotlib.pyplot as plt # for plotting


# ## make fake data and save to file

# In[3]:


# make a fake data set
nsample = 50 # noise parameters

x = np.linspace(0,10,nsample)
a=1; b=2; noise=40
# linear "model"
y =  a+b*x + (-.5+np.random.rand(len(x)))*noise

# print to file - WARNING - overrides locaL stuff
f = open('mydata.dat','w')
for i in range(len(x)):
    f.write("{:15.8e} {:15.8e}\n".format(x[i],y[i]))
f.close()


# ## read in x-y data

# In[4]:


# change file name here
fname = 'mydata.dat'
# use CSV reader, but no header, and white space separated
data = pd.read_csv(fname,header=None,delim_whitespace=True)
x=data[0];y=data[1]
print(f'read {len(x)} data from {fname}')


# ## compute correlations

# In[5]:


[rp, pp ] =sc.stats.pearsonr(x,y)
outp = 'r_p = {:5.3} p_p = {:5.3%}'.format(rp,(1-pp))
print(outp)

[rs, ps ] =sc.stats.spearmanr(x,y)
outs = 'r_s = {:5.3} p_s = {:5.3%}'.format(rs,(1-ps))
print(outs)


# ## plot

# In[6]:


plt.scatter(x,y)
plt.xlabel('x')
plt.ylabel('y')
plt.title(outp+'; '+outs)

